{"version":3,"sources":["images/Video-Featured-final.jpg","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","react_default","a","createElement","className","style","width","height","src","require","reactstrap_es","sm","row","for","type","name","id","placeholder","defaultValue","value","toString","label","inline","check","size","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a8abd1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Video-Featured-final.992914fc.jpg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Col,Button, Form, FormGroup, Label, Input, FormText,Card,CardBody,CustomInput } from 'reactstrap';\nimport './App.css';\nimport DatePicker from \"react-datepicker\";\n\nclass App extends Component {\n  constructor(props)\n  {\n    super(props)\n    this.state = {\n      date : new Date()\n    }\n  }\n  render() {\n    return (\n      <div className=\"SlotBooking\">\n        <img style={{width: '100%', height: '100px'}} src={require(\"./images/Video-Featured-final.jpg\")}></img>\n        <center>\n          <div></div>\n        <Col sm={8}>\n        <Card>\n        <CardBody>\n        <Form>\n          <FormGroup row>\n            <Label for=\"location\" sm={2}>Location</Label>\n            <Col sm={8}>\n              <Input type=\"text\" name=\"text\" id=\"location\" placeholder=\"Ex: Bangalore\" />\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Label for=\"date\" sm={2}>Date</Label>\n            <Col sm={8}>\n              <Input type=\"date\" name=\"date\" id=\"date\" defaultValue = {\"fgfgdfgd\"} value={new Date().toString()} placeholder=\"date placeholder\" />\n            </Col>\n          </FormGroup>\n          \n          <FormGroup row>\n            <Label for=\"time\" sm={2}>Time</Label>\n            <Col sm={8}>\n              <Input type=\"time\" name=\"time\" id=\"time\" placeholder=\"time placeholder\" />\n            </Col>\n          </FormGroup>\n          <FormGroup row>\n            <Col sm={2}>\n              <Label for=\"exampleCheckbox\">Radios</Label>\n            </Col>\n            <Col sm={8}>\n              <CustomInput type=\"radio\" id=\"type1\" name=\"type\" label=\"type1\" inline />\n              <CustomInput type=\"radio\" id=\"type2\" name=\"type\" label=\"type2\" inline />\n              <CustomInput type=\"radio\" id=\"type3\" name=\"type\" label=\"type3\" inline/>\n            </Col>\n          </FormGroup>\n          <FormGroup check row>\n            <Col sm={{ size: 10}}>\n              <Button>Book</Button>\n            </Col>\n          </FormGroup>\n          \n        </Form>\n        </CardBody>\n        </Card>\n        </Col>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}